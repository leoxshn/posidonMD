tabTitle = posidonMD test
title = posidonMD test document
description = This is the test document for the posidonMD compiler, used for debugging and development.
author = Leo Shneyderis
keywords = test, text, parser, compiler

@body:
plain gibberish: |gibberish text|
*bold* gibberish: *|gibberish text|*
_italic_ gibberish: _|gibberish text|_
*_bold italic_* gibberish: *_|gibberish text|_*
_*italic bold*_ gibberish: _*|gibberish text|*_

quotes: "give us your money"

@code: kotlin
const val str = "blablabla"
val a = b * c
fun banana() {
    println("BANANAAAA!!")
}
@body:
@code: pmd
tabTitle = posidonMD test
title = posidonMD test document
description = This is the test document for the posidonMD compiler, used for debugging and development.
author = Leo Shneyderis
keywords = test, text, parser, compiler

\@body:
plain gibberish: |gibberish text|
*bold* gibberish: *|gibberish text|*
_italic_ gibberish: _|gibberish text|_
*_bold italic_* gibberish: *_|gibberish text|_*
_*italic bold*_ gibberish: _*|gibberish text|*_

quotes: "give us your money"

@body:
@code: kotlin
package posidon.markdown.compiler.code

class KotlinCodeAppender : CodeAppender() {

    override fun append(line: String) {
        var i = 0
        var lastStrB = StringBuilder()
        var strStack = ArrayList<String>()
        var startSpaces = 0
        var startSpacesInterrumped = false
        var inString = false
        var inChar = false
        while (i != line.length) {
            val char = line[i]
            when {
                char == '"' -> {
                    lastStrB.append('"')
                    if (inString) {
                        var j = i - 1
                        while (j != -1)
                            if (line[j] == '\\') j--
                            else break
                        if ((i - j) % 2 == 0) inString = false
                    } else if (!inChar) inString = true
                }
                char == ')' ||
                char == '[' ||
                char == ']' ||
                char == '{' ||
                char == '}' -> {
                    startSpacesInterrumped = true
                    builder.append(lastStrB.toString())
                    lastStrB = StringBuilder()
                    builder.append("<span style=\"color:var(--bracket-color);\">$char</span>")
                }
                char == '(' -> {
                    startSpacesInterrumped = true
                    val token = lastStrB.toString()
                    if (strStack.lastOrNull() == "fun") {
                        builder.append("<span style=\"color:#f8d055;\">$token</span>")
                        strStack.removeAt(strStack.lastIndex)
                    } else builder.append(token)
                    lastStrB = StringBuilder()
                    builder.append("<span style=\"color:var(--bracket-color);\">(</span>")
                }
                char == '\t' -> {
                    startSpaces += 4
                    builder.append("<span class=\"s\">")
                    builder.append("<span class=\"s\">")
                    builder.append("<span class=\"s\">")
                    builder.append("<span class=\"s\">")
                }
                char == ' ' || (i == line.lastIndex).also { if (it) lastStrB.append(char) } -> {
                    if (startSpacesInterrumped) {
                        when (val token = lastStrB.toString()) {
                            "val", "var", "const" -> builder.append("<span style=\"color:orange;\">$token</span>")
                            "fun" -> {
                                builder.append("<span style=\"color:orange;\">$token</span>")
                                strStack.add("fun")
                            }
                            else -> builder.append(token)
                        }
                        lastStrB = StringBuilder()
                        if (i != line.lastIndex) builder.append(' ')
                    } else {
                        builder.append(lastStrB)
                        startSpaces++
                        builder.append("<span class=\"s\">")
                    }
                }
                else -> { startSpacesInterrumped = true; lastStrB.append(char) }
            }
            i++
        }
        for (_s in 0..startSpaces) builder.append("</span>")
        builder.append("<br>")
    }
}
@body:

@code: kotlin
const val str = "blablabla"
val a = b * c
@body:

[link text](https://posidon.io)
[*link bold text*](https://posidon.io)
[bold link text](https://posidon.io)
[*_link bold italic text_*](https://posidon.io)
[_*link italic bold text*_](https://posidon.io)


![this is supposed to be an iframe](https://posidon.io)
![this is supposed to be an image](https://posidon.io/img/banner.png)